#LAB 2
#A1: probabilitatea de a avea cel puțin două persoane cu aceeași zi de naștere în grupul de k persoane,
# pe baza numărului specificat de simulări (num_simulations)
import numpy as np

num_simulations = 100000  # Numărul de simulări de rulează
k = 23  # Numărul de persoane din grup
n = 365  # Numărul de zile într-un an
count_event = 0  # Contor pentru numărul de simulări în care cel puțin două persoane împart aceeași zi de naștere

for i in range(num_simulations):
    birthdays = np.random.randint(1, n + 1, size=k)

    # Verifică dacă există zile de naștere duplicate în grup
    if len(birthdays) != len(set(birthdays)):
        count_event += 1

probability_A = count_event / num_simulations

print("Probabilitate: ", probability_A)
import math

#beispiel
import numpy
from matplotlib.pyplot import axis, plot, figure, show, legend

# Crează o nouă figură
fig = figure()

# Setează aspectul graficului ca fiind pătrat
axis("square")

# Stabilește limitele axelor (0-1 pe ambele axe)
axis((0, 1, 0, 1))

# Generează 25 de puncte aleatoare pentru coordonatele X și Y
X = numpy.random.random(25)
Y = numpy.random.random(25)

# Plotează punctele ca cercuri albastre
plot(X, Y, "bo")

# Adaugă un titlu pentru figura
fig.suptitle("Beispiel 1", fontweight="bold")

# Afișează graficul
show()

# Crează o nouă figură
fig = figure()

# Setează aspectul graficului ca fiind pătrat
axis("square")

# Stabilește limitele axelor (0-1 pe ambele axe)
axis((0, 1, 0, 1))

# Plotează pătratul lui X ca asteriscuri verzi
plot(X, numpy.square(X), "g*")

# Plotează a patra putere a lui X ca cercuri magenta
plot(X, numpy.power(X, 4), "mo")

# Marchează ultimul punct din array-ul X cu un asterisc verde și un cerc magenta,
# și adaugă etichete ("x^2" și "x^4") în legendă
plot(X[-1], numpy.square(X[-1]), "g*", label="x^2")
plot(X[-1], numpy.power(X[-1], 4), "mo", label="x^4")

# Afișează legenda în colțul din stânga sus
legend(loc='upper left')

# Adaugă un titlu pentru figura
fig.suptitle("Beispiel 2", fontweight="bold")

# Afișează graficul
show()

#A2
#(import math -> math.dist([x1,y1],[x2,y2]))
import random
import math
import matplotlib.pyplot as plt
#a
# Funcție pentru estimarea valorii lui Pi folosind metoda Monte Carlo
def estimate_pi(N):
    k = 0  # Contor pentru numărul de puncte în interiorul cercului
    points_inside = []  # Lista pentru a stoca coordonatele punctelor din interiorul cercului

    # Generează N puncte aleatorii și calculează distanța față de centrul cercului
    for i in range(N):
        x = random.random()
        y = random.random()
        distance = math.dist((x, y), (0.5, 0.5))

        # Verifică dacă punctul se află în interiorul cercului
        if distance <= 0.5:
            k += 1
            points_inside.append((x, y))
    #b
    # Estimează probabilitatea ca un punct generat aleator să cadă în interiorul cercului
    estimated_probability = k / N

    #c
    # Aproximează valoarea lui Pi
    pi_approximation = 4 * estimated_probability

    # Returnează aproximarea valorii lui Pi și lista de puncte din interiorul cercului
    return pi_approximation, points_inside

# Numărul de puncte generate aleator pentru estimarea lui Pi
N = 3000

# Obține aproximarea lui Pi și lista de puncte din interiorul cercului
estimated_pi, inside_points = estimate_pi(N)

# Despachetează coordonatele punctelor din interior
inside_x, inside_y = zip(*inside_points)

# Generează și selectează puncte aleatorii în afara cercului pentru a le afișa în grafic
outside_x, outside_y = [], []
for i in range(N - len(inside_x)):
    x, y = random.random(), random.random()
    distance = math.dist((x, y), (0.5, 0.5))

    # Verifică dacă punctul se află în afara cercului
    if distance > 0.5:
        outside_x.append(x)
        outside_y.append(y)

# Creează o figură pentru afișarea rezultatelor
fig = plt.figure(figsize=(6, 6))

# Setează aspectul graficului ca fiind pătrat
plt.axis("square")

# Stabilește limitele axelor (0-1 pe ambele axe)
plt.axis((0, 1, 0, 1))

# Plotează punctele din interiorul cercului cu roșu și le etichetează
plt.plot(inside_x, inside_y, 'ro', label='Puncte în cerc')

# Plotează punctele în afara cercului cu albastru și le etichetează
plt.plot(outside_x, outside_y, 'bo', label='Puncte în afara cercului')

# Adaugă un titlu pentru grafic, afișând și aproximarea lui Pi
plt.title(f'Approximation of Pi: {estimated_pi}', fontweight="bold")

# Adaugă legenda în colțul din stânga sus
plt.legend()

# Afișează graficul
plt.show()

# A3: Probabilitatea ca exact un unghi să fie obtuz și probabilitatea ca două unghiuri să fie obtuze,
# A fiind un punct din patrat legat de colturi
import random
import matplotlib.pyplot as plt
import math  # Este nevoie să importăm modulul math pentru a utiliza funcții matematice

# Funcție pentru generarea aleatoare a unui punct în interiorul pătratului unitate
def generare_punct():
    x = random.uniform(0, 1)
    y = random.uniform(0, 1)
    return x, y

# Funcție pentru calculul unghiului dintre trei puncte
def calculeaza_unghi(x1, y1, x2, y2, x3, y3):
    # Calculează lungimile laturilor triunghiului
    a = ((x2 - x1) * 2 + (y2 - y1) * 2) ** 0.5
    b = ((x3 - x2) * 2 + (y3 - y2) * 2) ** 0.5
    c = ((x3 - x1) * 2 + (y3 - y1) * 2) ** 0.5

    # Calculează cosinusul unghiului folosind teorema cosinusului
    cos_theta = (a * 2 + b * 2 - c ** 2) / (2 * a * b)

    # Calculează valoarea absolută a unghiului în radiani
    unghi_rad = abs(math.acos(cos_theta))

    # Converteste unghiul în grade
    unghi_deg = math.degrees(unghi_rad)

    return unghi_deg

# Funcție pentru simularea experimentului
def simulare():
    # Generare punct A în interiorul pătratului
    A = generare_punct()

    # Definirea colțurilor pătratului
    v1 = (0, 0)
    v2 = (1, 0)
    v3 = (1, 1)
    v4 = (0, 1)

    # Contorizarea unghiurilor obtuze
    unghiuri_obtuz1 = 0
    unghiuri_obtuz2 = 0

    # Realizarea simulării pentru 10000 de iterații
    for _ in range(10000):
        # Generare punct B în interiorul pătratului
        B = generare_punct()

        # Calculul unghiurilor dintre punctul A și colțurile pătratului
        unghi1 = calculeaza_unghi(A[0], A[1], B[0], B[1], v1[0], v1[1])
        unghi2 = calculeaza_unghi(A[0], A[1], B[0], B[1], v2[0], v2[1])
        unghi3 = calculeaza_unghi(A[0], A[1], B[0], B[1], v3[0], v3[1])
        unghi4 = calculeaza_unghi(A[0], A[1], B[0], B[1], v4[0], v4[1])

        # Verificare dacă cel puțin un unghi este obtuz
        if 90 < unghi1 < 180 or 90 < unghi2 < 180 or 90 < unghi3 < 180 or 90 < unghi4 < 180:
            unghiuri_obtuz1 += 1

        # Verificare dacă exact două unghiuri sunt obtuze
        if 90 < unghi1 < 180 and 90 < unghi2 < 180:
            unghiuri_obtuz2 += 1

    # Calcularea probabilităților
    probabilitate1 = unghiuri_obtuz1 / 10000
    probabilitate2 = unghiuri_obtuz2 / 10000

    # Afișarea rezultatelor
    print(f"Probabilitatea ca exact un unghi din A să fie obtuz: {probabilitate1}")
    print(f"Probabilitatea ca exact două unghiuri din A să fie obtuze: {probabilitate2}")

    # Vizualizarea pătratului și punctului A
    plt.scatter([v1[0], v2[0], v3[0], v4[0], A[0]], [v1[1], v2[1], v3[1], v4[1], A[1]],
                color=['red', 'red', 'red', 'red', 'blue'], label=['V1', 'V2', 'V3', 'V4', 'A'])
    plt.plot([v1[0], A[0]], [v1[1], A[1]], color='black')
    plt.plot([v2[0], A[0]], [v2[1], A[1]], color='black')
    plt.plot([v3[0], A[0]], [v3[1], A[1]], color='black')
    plt.plot([v4[0], A[0]], [v4[1], A[1]], color='black')

    # Afișarea graficului
    plt.show()


# Rularea simulării
simulare()

# A4: Probabilitatea ca un punct ales aleatoriu din pătrat să fie în interiorul triunghiului inferior sau superior
import random
import matplotlib.pyplot as plt

# Funcție pentru verificarea dacă un punct este în interiorul unui triunghi
def is_inside_triangle(x, y, A, B, C):
    def sign(p1, p2, p3):
        return (p1[0] - p3[0]) * (p2[1] - p3[1]) - (p2[0] - p3[0]) * (p1[1] - p3[1])

    d1 = sign((x, y), A, B)
    d2 = sign((x, y), B, C)
    d3 = sign((x, y), C, A)

    has_negative = (d1 < 0) or (d2 < 0) or (d3 < 0)
    has_positive = (d1 > 0) or (d2 > 0) or (d3 > 0)

    return not (has_negative and has_positive)

# Numărul de puncte generate
N = 500

# Definirea vârfurilor triunghiurilor
upper_triangle = [(0, 0), (1, 0), (0.5, 0.5)]
lower_triangle = [(0, 1), (1, 1), (0.5, 0.5)]

# Lista pentru a reține punctele care sunt în interiorul triunghiurilor
points_inside_triangles = []

# Generarea și testarea aleatorie a punctelor
for _ in range(N):
    x = random.random()
    y = random.random()

    # Verificarea dacă punctul este în interiorul măcar unui triunghi
    if is_inside_triangle(x, y, *upper_triangle) or is_inside_triangle(x, y, *lower_triangle):
        points_inside_triangles.append((x, y))

# Calcularea probabilității că un punct să fie în interiorul unui triunghi
probability_inside_triangles = len(points_inside_triangles) / N

# Afișarea rezultatului
print(f'Probabilitate în triunghi: {probability_inside_triangles:.2f}')

# Vizualizarea punctelor și triunghiurilor
points_x, points_y = zip(*points_inside_triangles)
plt.scatter(points_x, points_y, color='red')  # Afișarea punctelor în interiorul triunghiurilor în roșu
plt.plot(*zip(*upper_triangle, upper_triangle[0]), color='black')  # Afișarea liniei triunghiului superior
plt.plot(*zip(*lower_triangle, lower_triangle[0]), color='black')  # Afișarea liniei triunghiului inferior
plt.xlim(0, 1)
plt.ylim(0, 1)
plt.gca().set_aspect('equal', adjustable='box')
plt.title(f'Probabilitate în triunghi: {probability_inside_triangles:.2f}')
plt.show()
