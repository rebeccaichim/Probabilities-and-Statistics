# LAB 3
import random
#intr-o urna sunt 6 bile rosii, 4 albastre si 6 verzi
#trage 3 bile consecutiv
#probabilitatea ca minim o bila rosie sa fie extrasa
#probabilitatea ca toate bilele extrase sa aiba aceeasi culoare
#P(A), P(B), P(A intersectat B), P(B|A)
#probabilitati teoretice: P(A), P(B), P(A intersectat B), P(B|A)
#A1
countA=0
countB=0
countAB=0 # A und B -> AB
N=10
for _ in range(N):
    kugeln = random.sample(['r', 'b', 'g'], counts=[6, 4, 6], k=3)
    if 'r' in kugeln:
        countA+=1 # mindestens eine rote Kugel
    print("count A: ",countA)
    if len(set(kugeln))==1 :
        countB+=1 # alle Kugeln haben dieselbe Farbe
    print("count B: ",countB)
    # A und B alle Kugeln sind rot
    countAB = countAB+( 'r' in kugeln and len(set(kugeln))==1)
    print("count AB: ",countAB)
print("anhand Simulationen P(A)", countA/N)
print("theoretisch P(A)", 1-(10*9*8)/(16*15*14))
print("anhand Simulationen P(B)", countB/N)
print("theoretisch P(B)", ((6*5*4)+(4*3*2))/(16*15*14))
print("anhand Simulationen P(A und B)", countAB/N)
print("theoretisch P(A und B)", (6*5*4)/(16*15*14))
print("anhand Simulationen P(B|A)", countAB/countA)
print("theoretisch P(B|A)", (6*5*4)/(16*15*14-10*9*8))

#A2

#desenati histograma frecventelor relative ale numerelor obtinute prin aruncarea zarurilor de 200 de ori
#ce repr histograma desenata cu albastru si ce se schimba daca N=2000
import numpy
from random import randrange
from matplotlib.pyplot import (bar, show, hist, grid, legend, xticks)

# Prima parte: Frecvențe relative
N = 200  # Numărul de aruncări de zaruri

# Generare de date aleatoare simulând aruncarea unui zar de N ori
daten = [randrange(1, 7) for _ in range(N)]

# Calculul frecvențelor relative ale fețelor zarului
z, count = numpy.unique(daten, return_counts=True)
d = dict([(z[i], count[i] / N) for i in range(0, 6)])
print(d)  # Afișează dicționarul cu frecvențele relative

# Afișarea unui grafic de bare pentru frecvențele relative și compararea cu probabilitățile teoretice
bar(z, count/N, width=0.8, color='red', edgecolor='black', label='relative Haufigkeiten')
D = dict([(k, 1/6) for k in range(1, 7)])  # Probabilitățile teoretice (uniforme pentru un zar echitabil)
bar(D.keys(), D.values(), width=0.7, color='blue', edgecolor='black', label='theor. Wkt.')
legend(loc='lower left')  # Afișează legenda în partea de jos-stânga
xticks(range(1, 7))  # Marchează axa x cu valorile de la 1 la 6
grid()  # Adaugă grila la grafic
show()  # Afișează graficul

# A doua parte: Frecvențe absolute
N = 300  # Numărul de aruncări de zaruri pentru a doua parte

# Generare de date aleatoare pentru a doua simulare de aruncări de zaruri
daten = [randrange(1, 7) for _ in range(N)]

# Calculul frecvențelor absolute ale fețelor zarului
z, count = numpy.unique(daten, return_counts=True)
d = dict([(z[i], count[i]) for i in range(0, 6)])
print(d)  # Afișează dicționarul cu frecvențele absolute

# Afișarea unui al doilea grafic de bare pentru frecvențele absolute și compararea cu așteptările teoretice
bar(z, count/N, width=0.8, color='red', edgecolor='black', label='absolute Haufigkeiten')
D = dict([(k, N/6) for k in range(1, 7)])  # Așteptările teoretice (toate fețele sunt de așteptat să apară de aproximativ 50 de ori)
bar(D.keys(), D.values(), width=0.7, color='blue', edgecolor='black', label='wie ouf jede Zahl auftaucht')
legend(loc='lower left')  # Afișează legenda în partea de jos-stânga
xticks(range(1, 7))  # Marchează axa x cu valorile de la 1 la 6
grid()  # Adaugă grila la grafic
show()  # Afișează graficul


# A3
# se arunca 3 zaruri si jocul e castigat de ala care prezice suma celor 3 nr care apar
# Afișează dicționarul cu frecvențele relative ale sumelor fețelor zarului, obținute în urma simulării.
# Afișează un mesaj de etichetare pentru afișarea probabilităților teoretice.
# Afișează dicționarul cu probabilitățile teoretice ale sumelor fețelor zarului.
# Afișează mesajul "Theoretisch: man wette auf" urmat de suma la care probabilitatea teoretică este maximă,
# adică la ce sume să pariezi pentru a avea cea mai mare șansă de câștig.
# Afișează sumele pentru care s-au obținut frecvențe relative în simulare.
# Afișează mesajul "anhand Simulationen: man wette auf" urmat de suma la care frecvența relativă este maximă în simulare,
# adică la ce sume să pariezi pentru a avea cea mai mare șansă de câștig, dar în baza simulărilor efectuate.
import numpy
from random import randrange
from matplotlib.pyplot import bar, show, hist, grid, legend, xticks

N = 200  # Numărul de aruncări de zaruri

# Generare de date aleatoare simulând aruncarea a trei zaruri de N ori
daten = [randrange(1, 7) + randrange(1, 7) + randrange(1, 7) for _ in range(N)]

# Calculul frecvențelor relative ale sumelor fețelor zarului
z, count = numpy.unique(daten, return_counts=True)
d = dict([(z[i], count[i] / N) for i in range(0, len(z))])
print(d)  # Afișează dicționarul cu frecvențele relative

# Afișarea unui grafic de bare pentru frecvențele relative ale sumelor fețelor zarului
bar(z, count/N, width=0.9, color='red', edgecolor='black')

# Calculul probabilităților teoretice pentru fiecare sumă posibilă (de la 3 la 18)
D = {k: 0 for k in range(3, 19)}
for i in [1, 2, 3, 4, 5, 6]:
    for j in [1, 2, 3, 4, 5, 6]:
        for k in [1, 2, 3, 4, 5, 6]:
            D[i + j + k] += 1 / 216
print("theoretisch")
print(D)  # Afișează dicționarul cu probabilitățile teoretice

# Afișarea unui al doilea grafic de bare pentru probabilitățile teoretice
bar(D.keys(), D.values(), width=0.6, color="blue", edgecolor="black")

# Determinarea sumei maxime teoretice și a sumei maxime simulate
m_p = max(D.values())
m_p_p = 0
m_s_p = 0

for i in range(3, 19):
    if D[i] == m_p:
        print("Theoretisch: man wette auf", i)

# Determinarea sumei minime simulate și a sumei maxime simulate
mm = min(d.keys())
m_s = max(count)/N

print(d.keys())
MM = max(d.keys())
for i in range(3, 19):
    if i in d.keys():
        if d[i] == m_s:
            print("anhand Simulationen: man wette auf", i)

xticks(range(2, 19))
grid()
show()  # Afișează graficul
