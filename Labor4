#LAB 4
# A1 Simulation  zufallige  Werte  fur X
#creati histograma frecventelor relative pentru 1000 de valori aleatorii ale lui X
#pe aceeasi imagine trageti barele pentru probabilitatile teoretice

# Importă biblioteca numpy pentru operații matematice și generarea de numere aleatoare
import numpy

# Importă funcții specifice din biblioteca matplotlib.pyplot pentru grafice
from matplotlib.pyplot import bar, show, hist, grid, xticks, legend

# Numărul de simulări
N = 1000

# Definirea valorilor posibile pentru X și probabilităților corespunzătoare
x = [0, 1, 3, 5]
P = [0.4, 0.1, 0.3, 0.2]

# Inițializarea unui generator de numere aleatoare folosind biblioteca numpy
rng = numpy.random.default_rng()

# Generarea aleatoare a N valori pentru X, folosind probabilitățile specificate
r = rng.choice(x, size=N, replace=True, p=P)

# Determinarea valorilor unice și frecvenței acestora în r
z, count = numpy.unique(r, return_counts=True)

# Crearea unui grafic de bare pentru reprezentarea frecvențelor relative ale valorilor generate
bar(z, count/N, width=0.8, color='red', edgecolor='black', alpha= 0.5, label='relative Häufigkeiten')

# Crearea unui grafic de bare pentru reprezentarea teoretică a probabilităților
bar(x, P, width=0.5, color='blue', edgecolor='black', alpha=0.7, label='Theoretische Häufigkeiten')

# Adăugarea unei legende în colțul stâng-jos al graficului
legend(loc="lower left")

# Adăugarea unei grile la grafic
grid()

# Afișarea graficului
show()

#A2
import numpy
from matplotlib.pyplot import bar, show, hist, grid, xticks, legend

# Partea 1: Generarea de valori aleatoarii pentru variabila aleatoare X
N = 1000
x = [0, 1, 2, 3, 4]
P = [0.25, 0.35, 0.25, 0.1, 0.05]

# Inițializarea unui generator de numere aleatoare
rng = numpy.random.default_rng()

# Generarea aleatoare a N valori pentru X, folosind probabilitățile specificate
r = rng.choice(x, size=N, replace=True, p=P)
print(r)
print()

# Partea 2: Calculul și afișarea frecvenței relative a valorilor mai mici sau egale cu 1
count = 0
for i in range(N):
    if r[i] <= 1:
        count += 1
print(count/N)

# Calculul valorilor unice și frecvența acestora în r
z, count = numpy.unique(r, return_counts=True)

# Crearea unui grafic de bare pentru reprezentarea frecvențelor relative ale valorilor generate și probabilităților teoretice
bar(z, count/N, width=0.8, color='red', edgecolor='black', alpha=0.5, label='relative Häufigkeiten')
bar(x, P, width=0.5, color='blue', edgecolor='black', alpha=0.7, label='Theoretische Häufigkeiten')

# Adăugarea unei legende în colțul stâng-jos al graficului
legend(loc="lower left")

# Adăugarea unei grile la grafic
grid()

# Afișarea graficului
show()

# Partea 3: Calculul și afișarea valorii așteptate relative și teoretice
# Calculul valorii așteptate relative (medie)
print(numpy.mean(r))

# Calculul valorii așteptate teoretice
a = 0
for i in range(len(x)):
    a += x[i] * P[i]
print(a)

# A3 Beispiel
import numpy
from scipy.stats import binom
from matplotlib.pyplot import bar, show, grid, legend, xticks

# Numărul de simulări
N = 1000

# Parametrii distribuției binomiale
n = 8
p = 0.5

# Generarea de N valori aleatoare folosind distribuția binomială
X = binom.rvs(n, p, size=N)

# Partea b: Crearea unui histogramă pentru frecvențele relative ale valorilor generate și probabilitățile teoretice
# Calculul probabilității pentru X=5 folosind scipy.stats.binom.pmf
w = binom.pmf(5, n, p)

# Inițializarea listelor pentru valorile posibile ale X și probabilitățile teoretice
P = []
val = []
for i in range(n+1):
    val.append(i)
    P.append(binom.pmf(i, n, p))

# Crearea unui histogramă pentru frecvențele relative ale valorilor generate
z, count = numpy.unique(X, return_counts=True)

bar(z, count/N, width=0.7, color='red', edgecolor='black', label='relative Häufigkeiten')

# Adăugarea barelor pentru probabilitățile teoretice
bar(val, P, width=0.5, color='blue', edgecolor='black', label='theor. Wahrsch.')

# Adăugarea unei legende în colțul stâng-jos al graficului
legend(loc='lower left')

# Setarea marcajelor pe axa x pentru valorile discrete ale variabilei aleatoare X
xticks(range(0, 9))

# Adăugarea unei grile la grafic
grid()

# Afișarea graficului
show()
